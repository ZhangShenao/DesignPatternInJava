1.策略模式
	定义了算法族,分别封装起来,让他们之间可以互相替换。此模式让算法的变化独立于使用算法的客户。
2.观察者模式
	定义了对象之间的一对多依赖,这样一来,当一个对象改变状态时,它的所有依赖者都会收到通知并自动更新。
3.装饰者模式
	动态地将责任附加到对象身上。若要扩展功能,装饰者提供了比继承更有弹性的方案。
4.工厂方法模式
	定义了一个创建对象的接口,但由子类决定要实例化的类是哪一个。工厂方法将类的实例化延迟到子类。
	工厂方法用于创建单个产品。
5.抽象工厂模式
	提供了一个接口,用于创建相关或依赖对象的家族,而不需要明确指定具体类。
	每个具体的工厂用于创建一类完整的产品族,工厂的每个方法用于创建产品族中的一个产品。
6.单例模式
	确保一个类只有一个实例,并提供一个全局访问点。
7.命令模式
	将"请求"封装成对象,以便使用不同的请求、队列或者日志来参数化其他对象。命令模式也支持可撤销的操作。(将具体的命令与该命令的接收者绑定在一起)
8.适配器模式
	将一个类的接口,装换成客户期望的另外一个接口。适配器让原本接口不兼容的类可以合作无间。
9.外观模式
	提供了一个统一的接口,用来访问子系统中的一群接口。外观定义了一个高层接口,让子系统更容易使用。
10.模板方法模式
	在一个方法中定义一个算法的骨架,而将一些具体的步骤延迟到子类中实现。
	模板方法使得子类可以在不改变算法结构的情况下,重新定义算法中的某些步骤。
11.迭代器模式	
	提供一种方法顺序访问一个聚合对象中的各个元素,而又不暴露器内部的表示。
12.状态模式
	允许对象在内部状态改变时改变它的行为,对象看起来好像修改了它的类。
