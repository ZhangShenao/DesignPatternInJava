1.策略模式
	定义了算法族,分别封装起来,让他们之间可以互相替换。此模式让算法的变化独立于使用算法的客户。
2.观察者模式
	定义了对象之间的一对多依赖,这样一来,当一个对象改变状态时,它的所有依赖者都会收到通知并自动更新。
<<<<<<< HEAD
4.工厂方法模式
	定义了一个创建对象的接口,但由子类决定要实例化的类是哪一个。工厂方法将类的实例化延迟到子类。
	工厂方法用于创建单个产品。
5.抽象工厂模式
	提供了一个接口,用于创建相关或依赖对象的家族,而不需要明确指定具体类。
	每个具体的工厂用于创建一类完整的产品族,工厂的每个方法用于创建产品族中的一个产品。
=======
3.装饰者模式
	动态地将责任附加到对象身上。若要扩展功能,装饰者提供了比继承更有弹性的方案。
>>>>>>> 7ba8635eaeb8566df3928ac5e6d6ee57744398db
